---
title: "Rearrangement report"
output: html_document
fig_width: 1920px
params:
  algfile: ""
---

```{r load necessary library, include = FALSE}
library(tidyverse)
library(ggseqlogo)
library(ggforce)
library(waffle)
library(patchwork)
library(reticulate)
```

```{r set parameters, include = FALSE}
algfile <- params$algfile
tablefile <- sub(".alg.", ".table.", algfile)
fields <- strsplit(algfile, ".", fixed = TRUE)[[1]]
ref1len <- strtoi(last(fields))
cut1 <- strtoi(fields[length(fields) - 2])
cut2 <- strtoi(fields[length(fields) - 1])
lineNum <- strtoi(system(sprintf("wc -l <%s", algfile), intern = TRUE))
```

```{r load alignment file and generate a tibble for single bases with positions, include = FALSE}
fd <- file(description = algfile, open = "r")
counts <- reflines <- querylines <- rep(NA, lineNum / 3)
lposes <- rposes <- vector(mode = "list", length = lineNum / 3)
for (i in seq(lineNum / 3)) {
  lines <- readLines(con = fd, n = 3)
  counts[i] <- strtoi(strsplit(lines[1], "\t")[[1]][2])
  reflines[i] <- lines[2] |> toupper()
  querylines[i] <- lines[3]
  rposes[[i]] <- cumsum(!(strsplit(reflines[i], "")[[1]] %in% c(" ", "-")))
  lposes[[i]] <- c(0, rposes[[i]][1:(length(rposes[[i]]) - 1)])
}
close(fd)
base_pos_df <- tibble(
  refbase = unlist(strsplit(reflines, NULL)),
  querybase = unlist(strsplit(querylines, NULL)),
  lpos = unlist(lposes),
  rpos = unlist(rposes),
  count = rep(counts, times = sapply(querylines, nchar, USE.NAMES = FALSE))
)
ref1 <- gsub("[- ]", "", reflines[1])
ref2 <- ref1 |> substr(ref1len + 1, nchar(ref1))
ref1 <- ref1 |> substr(1, ref1len)

base_pos_df |>
  mutate(part = factor(ifelse(rpos == 0, "updangle", ifelse(lpos == nchar(ref1) + nchar(ref2), "downdangle", ifelse(lpos == nchar(ref1) & rpos == nchar(ref1), "randomins", ifelse(lpos < nchar(ref1), "ref1", "ref2")))), levels = c("updangle", "ref1", "randomins", "ref2", "downdangle"))) |>
  mutate(posstatus = factor(ifelse(refbase == "-", "ins", ifelse(querybase == "-", "del", ifelse(querybase == refbase, "match", "SNP"))), levels = c("ins", "del", "SNP", "match"))) ->
  base_pos_df
```

```{r barplot of positional indel for ref1, fig.cap = "barplot of positional indel for ref1", echo = FALSE, message = FALSE, warning = FALSE}
base_pos_df |>
  mutate(rel1pos = (lpos + rpos) / 2 - cut1) |>
  filter(part == "ref1") |>
  ggplot(aes(rel1pos, fill = posstatus, weight = count)) +
  stat_bin(data = ~ filter(.x, posstatus != "ins"), breaks = seq(-cut1, nchar(ref1) - cut1)) +
  stat_bin(mapping = aes(color = "black"), data = ~ filter(.x, posstatus == "ins"), geom = "step", direction = "mid", breaks = seq(-cut1 + 0.5, nchar(ref1) - cut1 - 0.5)) +
  scale_x_continuous(name = "position relative to cut1") +
  scale_fill_discrete(name = NULL, limits = c("del", "SNP", "match"), labels = c("deletion", "SNP", "match")) +
  scale_color_identity(name = NULL, guide = guide_legend(), labels = "insertion") ->
  ggfig
print(ggfig)
# ggsave("indel.pos.ref1.png", plot = ggfig, path = dirname(algfile))
```
```{r barplot of positional indel for ref2, fig.cap = "barplot of positional indel for ref2", echo = FALSE, message = FALSE, warning = FALSE}
base_pos_df |>
  mutate(rel2pos = (lpos + rpos) / 2 - nchar(ref1) - cut2) |>
  filter(part == "ref2") |>
  ggplot(aes(rel2pos, fill = posstatus, weight = count)) +
  stat_bin(data = ~ filter(.x, posstatus != "ins"), breaks = seq(-cut1, nchar(ref1) - cut1)) +
  stat_bin(mapping = aes(color = "black"), data = ~ filter(.x, posstatus == "ins"), geom = "step", direction = "mid", breaks = seq(-cut1 + 0.5, nchar(ref1) - cut1 - 0.5)) +
  scale_x_continuous(name = "position relative to cut2") +
  scale_fill_discrete(name = NULL, limits = c("del", "SNP", "match"), labels = c("deletion", "SNP", "match")) +
  scale_color_identity(name = NULL, guide = guide_legend(), labels = "insertion") ->
  ggfig
print(ggfig)
# ggsave("indel.pos.ref2.png", plot = ggfig, path = dirname(algfile))
```

```{r base count of dangle, fig.cap = "base count of dangle", echo = FALSE, message = FALSE, warning = FALSE}
base_pos_df |>
  ggplot(aes(part, weight = count)) +
  geom_bar() +
  scale_x_discrete(limits = c("updangle", "randomins", "downdangle")) +
  scale_y_log10() ->
  ggfig
print(ggfig)
# ggsave("indel.pos.dangle.png", plot = ggfig, path = dirname(algfile))
```

```{r base substitution, fig.cap = "base substitution", echo = FALSE, message = FALSE, warning = FALSE}
base_pos_df |>
  mutate(trans = factor(sprintf("%s>%s", refbase, querybase),
    levels = c("A>A", "C>C", "G>G", "T>T",
    "A>C", "A>G", "A>T", "C>A", "C>G", "C>T", "G>A", "G>C", "G>T", "T>A", "T>C", "T>G",
    "A>-", "C>-", "G>-", "T>-",
    "->A", "->C", "->G", "->T"
    ))) |>
  ggplot(aes(trans, weight = count)) +
  geom_bar() +
  scale_y_log10() ->
  ggfig
print(ggfig)
# ggsave("indel.pos.trans.png", plot = ggfig, path = dirname(algfile))
```

```{r show micro-homology, fig.cap = "show micro-homology", echo = FALSE, message = FALSE, warning = FALSE}
ref1vec <- strsplit({{ref1}}, "")[[1]]
ref2vec <- strsplit({{ref2}}, "")[[1]]
microhomo <- matrix(as.integer(rep(ref1vec, time = length(ref2vec)) == rep(ref2vec, each = length(ref1vec))), nrow = length(ref1vec))
for (i in seq_len(nrow(microhomo))) {
  for (j in seq_len(ncol(microhomo))) {
    if (i > 1 && j > 1)
    {
      if (microhomo[i, j] > 0) {
        microhomo[i, j] <- microhomo[i - 1, j - 1] + microhomo[i, j]
      }
    }
  }
}
rc <- which(microhomo > 3, arr.ind = T)
pos12 <- rc[rep(seq_len(nrow(rc)), time = microhomo[rc]),] -
  rep(unlist(sapply(microhomo[rc], function(i) seq(i - 1, 0, by = -1))), time = 2)
tibble(pos1 = pos12[, 1], pos2 = pos12[, 2]) |>
  ggplot(aes(pos1, pos2)) +
  geom_point() ->
  ggfig
print(ggfig)
# ggsave("ref1.ref2.micro.homo.png", plot = ggfig, path = dirname(algfile))
```

```{r load and preprocess information table for alignments, include = FALSE}
indel_tsv <- read_tsv(tablefile, col_types = "iiiciiiiciiiiciid", na = "NA")
indel_tsv |>
  mutate(templated = (ref_end1 > cut1 | ref_start2 < cut2)) |>
  mutate(deletion = (ref_end1 < cut1 | ref_start2 > cut2)) |>
  mutate(random = (nchar(random_insertion) > 0)) |>
  mutate(insertion = (templated | random)) |>
  mutate(indel_type = factor(ifelse(insertion & !deletion, "insertion",
                             ifelse(deletion & !insertion, "deletion",
                             ifelse(insertion & deletion, "indel", "WT"
                      ))), levels = c("WT", "deletion", "insertion", "indel"))) |>
  mutate(indel_type_ex = factor(ifelse(templated & deletion & random, "full",
                             ifelse(templated & deletion & !random, "tempdel",
                             ifelse(templated & !deletion & random, "temprand",
                             ifelse(templated & !deletion & !random, "templated",
                             ifelse(!templated & deletion & random, "randdel",
                             ifelse(!templated & deletion & !random, "deletion",
                             ifelse(!templated & !deletion & random, "random", "WT"
  ))))))), levels = c("WT", "deletion", "templated", "random", "temprand", "tempdel", "randdel", "full"))) ->
  indel_tsv
```

```{r indel type count, fig.cap = "indel type count", echo = FALSE, message = FALSE, warning = FALSE}
indel_tsv |>
  summarise(count = sum(count), .by = indel_type) |>
  mutate(percent = count / sum(count), perlabel = scales::percent(percent, accuracy = 0.01)) |>
  mutate(type_count = sprintf("%s: %d", indel_type, count)) |>
  mutate(type_count = factor(type_count, levels = c(type_count[startsWith(type_count, "WT")], type_count[startsWith(type_count, "deletion")], type_count[startsWith(type_count, "insertion")], type_count[startsWith(type_count, "indel")]))) |>
  ggplot(aes(1, percent, fill = type_count, weight = count)) +
  geom_col() +
  geom_text(aes(label = perlabel), position = position_stack(vjust = 0.5)) +
  scale_x_discrete(name = NULL, breaks = NULL) +
  scale_y_continuous(breaks = c(0, 0.25, 0.5, 0.75), labels = scales::percent) +
  scale_fill_manual(values = RColorBrewer::brewer.pal(8, "Set1")[c(1, 2, 3, 6)]) +
  coord_polar(theta = "y") ->
  ggfig1

indel_tsv |>
  summarise(count = sum(count), .by = indel_type_ex) |>
  mutate(percent = count / sum(count), perlabel = scales::percent(percent, accuracy = 0.01)) |>
  mutate(type_count_ex = sprintf("%s: %d", indel_type_ex, count)) |>
  mutate(type_count_ex = factor(type_count_ex, levels = c(type_count_ex[startsWith(type_count_ex, "WT")], type_count_ex[startsWith(type_count_ex, "deletion")], type_count_ex[startsWith(type_count_ex, "templated")], type_count_ex[startsWith(type_count_ex, "random")], type_count_ex[startsWith(type_count_ex, "temprand")], type_count_ex[startsWith(type_count_ex, "tempdel")], type_count_ex[startsWith(type_count_ex, "randdel")], type_count_ex[startsWith(type_count_ex, "full")]))) |>
  ggplot(aes(1, percent, fill = type_count_ex, weight = count)) +
  geom_col() +
  geom_text(aes(label = perlabel), position = position_stack(vjust = 0.5)) +
  scale_x_discrete(name = NULL, breaks = NULL) +
  scale_y_continuous(breaks = c(0, 0.25, 0.5, 0.75), labels = scales::percent) +
  scale_fill_manual(values = RColorBrewer::brewer.pal(8, "Set1")) +
  coord_polar(theta = "y") ->
  ggfig2

indel_tsv |>
  summarise(count = sum(count), .by = indel_type) |>
  ggplot(aes(fill = indel_type, values = count)) +
  geom_waffle(n_rows = 10, color = "white", make_proportional = TRUE) +
  scale_fill_manual(limits = c("WT", "deletion", "insertion", "indel"), values = RColorBrewer::brewer.pal(8, "Set1")[c(1, 2, 3, 6)]) +
  coord_equal() ->
  ggfig3

indel_tsv |>
  summarise(count = sum(count), .by = indel_type_ex) |>
  ggplot(aes(fill = indel_type_ex, values = count)) +
  geom_waffle(n_rows = 10, color = "white", make_proportional = TRUE) +
  scale_fill_manual(limits = c("WT", "deletion", "templated", "random", "temprand", "tempdel", "randdel", "full"), values = RColorBrewer::brewer.pal(8, "Set1")) +
  coord_equal() ->
  ggfig4

ggfig <- (ggfig1 | ggfig2) / (ggfig3 | ggfig4)
print(ggfig)
# ggsave("pie.waffle.indel.type.png", plot = ggfig, path = dirname(algfile), width = 18, height = 9)
```

```{r dangle length distribution, fig.cap = "dangle length distribution", echo = FALSE, message = FALSE, warning = FALSE}
indel_tsv |>
  mutate(uplen = nchar(updangle)) |>
  mutate(randlen = nchar(random_insertion)) |>
  mutate(downlen = nchar(downdangle)) |>
  pivot_longer(cols = c(uplen, randlen, downlen), names_to = "unmapped", values_to = "unmapped_length") |>
  ggplot(aes(unmapped_length, weight = count, fill = unmapped)) +
  geom_bar() +
  scale_y_log10() +
  scale_fill_discrete(limits = c("uplen", "randlen", "downlen"), labels = c("updangle length", "random insertion length", "downdangle length")) ->
  ggfig
print(ggfig)
# ggsave("unmapped.length.png", plot = ggfig, path = dirname(algfile))
```

```{r score distribution, fig.cap = "score distribution", echo = FALSE, message = FALSE, warning = FALSE}
indel_tsv |>
  ggplot(aes(score, weight = count)) +
  stat_bin(aes(y = after_stat(count) / after_stat(width))) +
  geom_density(aes(y = after_stat(count)), color = "red") +
  scale_y_continuous(name = "count / bin_width")->
  ggfig
print(ggfig)
# ggsave("score.distribution.png", plot = ggfig, path = dirname(algfile))
```

```{r get raw query reads in reference, include = FALSE}
fd <- file(description = algfile, open = "r")
counts <- queryinref <- rep(NA, lineNum / 3)
for (i in seq(lineNum / 3)) {
  lines <- readLines(con = fd, n = 3)
  counts[i] <- strtoi(strsplit(lines[1], "\t")[[1]][2])
  queryinref[i] <- str_split(lines[3], "")[[1]][!(str_split(toupper(lines[2]), "")[[1]] %in% c("-", " "))] |> paste(collapse = "")
  queryinref[i] <- gsub("-", "D", queryinref[i], fixed = TRUE)
}
close(fd)
queryinref <- tibble(sequence = rep(queryinref, time = counts))
```

```{r seqLogo, fig.cap = "seqLogo", fig.asp = 0.5, echo = FALSE, message = FALSE, warning = FALSE}
ggplot() +
  geom_logo(queryinref, method = "bits", namespace = "ACGTD") +
  scale_x_continuous(breaks = NULL) +
  theme_logo() ->
  ggfig1

ggplot() +
  geom_logo(queryinref, method = "prob", namespace = "ACGTD") +
  scale_x_continuous(breaks = NULL) +
  theme_logo() ->
  ggfig2

write_tsv(queryinref, file = pipe(sprintf("sed -r 's/D/-/g' | seq2logo-2.0/Seq2Logo.py -o %s/seqlogo.wKL -I 3 -C 0", dirname(algfile))), col_names = FALSE)
logomat <- read_table(file.path(dirname(algfile), "seqlogo.wKL.txt"), col_names = c("pos", "base", "A", "C", "G", "T"), col_types = "icdddd", skip = 3) |> select(A, C, G, T) |> as.matrix() |> t()
ggplot() +
  geom_logo(logomat, method = 'custom', seq_type = 'dna') +
  scale_x_continuous(breaks = NULL) +
  scale_y_continuous(name = "wKL") +
  theme_logo() -> ggfig3

ggfig <- ggfig1 / ggfig2 / ggfig3
print(ggfig)
# ggsave("seqlogo.bits.prob.WLK.png", plot = ggfig, path = dirname(algfile), width = 30, height = 3)
```

```{r polygon insertion, fig.cap = "polygon insertion", fig.asp = 0.5, echo = FALSE, message = FALSE, warning = FALSE}
fd <- file(description = algfile, open = "r")
counts <- reflines <- rep(NA, lineNum / 3)
for (i in seq(lineNum / 3)) {
  lines <- readLines(con = fd, n = 3)
  counts[i] <- strtoi(strsplit(lines[1], "\t")[[1]][2])
  reflines[i] <- lines[2] |> toupper()
}
close(fd)

regs <- gregexpr("-+", reflines)
inscounts <- rep(counts, time = unlist(lapply(regs, function(reg){if (reg[1] == -1) return(0); return(length(reg))})))
insposes <- lapply(regs, function(reg) {if (reg[1] == -1) return(NULL); clen <- cumsum(attributes(reg)$match.length); reg - 1 - c(0, clen[seq_len(length(clen)-1)])}) |> unlist()
inslens <- lapply(regs, function(reg) {if (reg[1] == -1) return(NULL); attributes(reg)$match.length}) |> unlist()

tibble(inscount = inscounts, inspos = insposes, inslen = inslens) |>
  summarise(count = sum(inscount), .by = c(inspos, inslen)) ->
  inssumm

polyxs <- rep(inssumm$inspos, each = 4)
polyxs[seq(3, length(polyxs), 4)] <- polyxs[seq(3, length(polyxs), 4)] + inssumm$inslen
polyys <- rep(0, time = length(polyxs))
polyys[2:3 + rep(seq(0, length(polyys) - 1, 4), each = 2)] <- rep(inssumm$count, each = 2)
tibble(polyx = polyxs, polyy = polyys) |>
  ggplot(aes(polyx, polyy)) +
  geom_polygon(color = "black", fill = NA, linewidth = 0.1) +
  scale_x_continuous(name = "pos") +
  scale_y_continuous(name = "count") ->
  ggfig
print(ggfig)
# ggsave("insertion.polygon.png", plot = ggfig, path = dirname(algfile), width = 8, height = 1)
```

```{r arc deletion, fig.cap = "arc deletion", fig.asp = 0.5, echo = FALSE, message = FALSE, warning = FALSE}
fd <- file(description = algfile, open = "r")
counts <- querylines <- rep(NA, lineNum / 3)
lposes <- vector(mode = "list", length = lineNum / 3)
for (i in seq(lineNum / 3)) {
  lines <- readLines(con = fd, n = 3)
  counts[i] <- strtoi(strsplit(lines[1], "\t")[[1]][2])
  refline <- lines[2] |> toupper()
  querylines[i] <- lines[3]
  rpos <- cumsum(!(strsplit(refline, "")[[1]] %in% c(" ", "-")))
  lposes[[i]] <- c(0, rpos)
}
close(fd)

regs <- gregexpr("-+", querylines)
delcounts <- rep(counts, time = unlist(lapply(regs, function(reg){if (reg[1] == -1) return(0); return(length(reg))})))
delstarts <- sapply(seq_len(length(regs)), function(i){if (regs[[i]][1] == -1) return(NULL); return(lposes[[i]][regs[[i]]])}) |> unlist()
delends <- sapply(seq_len(length(regs)), function(i){if (regs[[i]][1] == -1) return(NULL); return(lposes[[i]][regs[[i]] + attributes(regs[[i]])$match.length])}) |> unlist()

tibble(delcount = delcounts, delstart = delstarts, delend = delends) |>
  summarise(count = sum(delcount), .by = c(delstart, delend)) |>
  ggplot(aes(x0 = (delstart + delend) / 2, y0 = 0, r = (delend - delstart) / 2, start = - pi / 2, end = pi / 2)) +
  geom_arc(aes(linewidth = count), alpha = 0.1) +
  scale_linewidth_continuous(range = c(0.1, 2)) +
  scale_x_continuous(name = "pos") +
  scale_y_continuous(name = NULL) ->
  ggfig
print(ggfig)
# ggsave("deletion.arc.png", plot = ggfig, path = dirname(algfile), width = 8, height = 1)
```